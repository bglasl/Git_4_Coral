theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))+
ylab("rel.abundance [%]")
p
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_wrap(~variable , ncol = 1)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))+
ylab("mean rel.abundance [%]")
p
pdf('IndVal_Treatment_TAXONOMY.pdf', width=8, height=10)
print(p)
graphics.off()
postscript(file = "IndVal_Treatment_TAXONOMY.eps", width =8, height = 10)
print(p)
dev.off()
IndValdf<-data.frame(INDVAL_Origin_GC$sign)
IndValdf<-rownames_to_column(IndValdf, var="ASV_ID")
IndValdf<-IndValdf %>% filter(p.value<=0.05) %>% dplyr:: rename(control=s.control) %>%
dplyr:: rename(`cumulative stress`=s.stress_2100)%>%
dplyr:: rename(`acute stress`=s.stress_ambient)
IndValdf<-IndValdf%>% dplyr::select(-index,-p.value,-stat)
library(reshape)
IndVallong<-melt(IndValdf)
indicatorNUMBER<-IndVallong %>% group_by(variable,value) %>% summarise(numberofOTUs=n())
# Component ‘A’ is the probability that the surveyed
# site belongs to the target site group given the fact that the species has been found.
# This conditional probability is called the specificity or positive predictive value of the species as indicator of the site group.
# Component ‘B’ is the probability of finding the species in sites belonging to the site group.
# This second conditional probability is called the fidelity or sensitivity of the species as indicator of the target site group
capture.output(summary.multipatt(INDVAL_Origin_GC, alpha = 0.05,indvalcomp=TRUE),file="IndVal_Treatment.csv")
## prep Graphs ####
# Define the taxa you want like this:
goodTaxa = (IndValdf$ASV_ID)
goodTaxa
allTaxa = taxa_names(Other_PHY_rel)
allTaxa <- allTaxa[(allTaxa %in% goodTaxa)]
ex1 = prune_taxa(allTaxa, Other_PHY_rel)
# new phyloseq object with just the taxa you kept.
ex1 #12 taxa
OTUTABLE<-as(otu_table(ex1), "matrix")
OTUTABLE<-as.data.frame(OTUTABLE)
OTUTABLE<-rownames_to_column(OTUTABLE, var="ASV_ID")
test<-inner_join(IndVallong,OTUTABLE, by=c("ASV_ID"))
test1<-test%>%gather("Sample_ID","Abundance",4:74)
# graph ####
TAXA<-as(tax_table(ex1),"matrix")
TAXA<-data.frame(TAXA)
TAXA<-rownames_to_column(TAXA, var="ASV_ID")
all1<-test1 %>%filter(value==1) %>% inner_join(TAXA,test1, by=c("ASV_ID")) %>% inner_join(METADATA, test1, by=c("Sample_ID"))
all3<-all1 %>% group_by(variable,ASV_ID) %>% summarise(MEAN=mean(Abundance))
all3
all4<-inner_join(TAXA,all3, by=c("ASV_ID"))
all4
all4a<-all3 %>% filter(MEAN>0)
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_wrap(~variable , ncol = 1)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))+
ylab("mean rel.abundance [%]")
p
View(all4)
all4$Treatment<-factor(all4$Treatment, levels=c("control", "acute stress", "cumulative stress"))
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_wrap(~variable , ncol = 1)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))+
ylab("mean rel.abundance [%]")
p
all4$Treatment<-as.factor(all4$Treatment, levels=c("control", "acute stress", "cumulative stress"))
all4$variable<-as.factor(all4$variable, levels=c("control", "acute stress", "cumulative stress"))
all4$variable<-factor(all4$variable, levels=c("control", "acute stress", "cumulative stress"))
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_wrap(~variable , ncol = 1)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))+
ylab("mean rel.abundance [%]")
p
pdf('IndVal_Treatment_TAXONOMY.pdf', width=8, height=10)
print(p)
graphics.off()
postscript(file = "IndVal_Treatment_TAXONOMY.eps", width =8, height = 10)
print(p)
dev.off()
View(all4)
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_wrap(~variable , ncol = 3)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))+
ylab("mean rel.abundance [%]")
p
facet_grid(~variable+
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_grid(~variable)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))+
ylab("mean rel.abundance [%]")
p
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_grid(~variable)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))+
ylab("mean rel.abundance [%]")
p
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_grid(~variable)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
coord_flip()
p
ylab("mean rel.abundance [%]")
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_grid(~variable)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
coord_flip()+
ylab("mean rel.abundance [%]")
p
pdf('IndVal_Treatment_TAXONOMY.pdf', width=10, height=8)
print(p)
graphics.off()
postscript(file = "IndVal_Treatment_TAXONOMY.eps", width =10, height = 8)
print(p)
dev.off()
postscript(file = "IndVal_Treatment_TAXONOMY.eps", width =12, height = 6)
print(p)
dev.off()
##### Figure 6 ####
# IndVal others
load(file="PHYLOSEQ_TABLE.RData")
library(phyloseq)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
library(microbiome)
PHYLOSEQ_TABLE=subset_samples(PHYLOSEQ_TABLE, Treatment!="field_control")
PHYLOSEQ_TABLE
Other_PHY<-subset_taxa(PHYLOSEQ_TABLE, Genus!="D_5__Endozoicomonas")
Other_PHY<-subset_samples(Other_PHY, SamplingTimepoint!="t1")
Other_PHY_rel = transform_sample_counts(Other_PHY, function(x)100*x/sum(x))
METADATA<-as(sample_data(Other_PHY_rel), "data.frame")
METADATA<-rownames_to_column(METADATA, var="Sample_ID")
OTU_table<-as(otu_table(Other_PHY_rel), "matrix")
if(taxa_are_rows(Other_PHY_rel)){OTU_table <- t(OTU_table)}
OTU_table_df = as.data.frame(OTU_table)
OTU_table_df<-rownames_to_column(OTU_table_df, var="Sample_ID")
# join datasets
library(dplyr)
library(tidyr)
OTU_table_IndVal<-right_join(METADATA, OTU_table_df, by="Sample_ID")
#indval
library(labdsv)
library(MASS)
library(vegan)
library(cluster)
library(indicspecies)
library(permute)
(INDVAL_OTUs_species_GC=(as.data.frame(OTU_table_IndVal[,14:2783])))
#Cluster
(INDVAL_Groups_Origin_GC=(as.character(OTU_table_IndVal$Treatment)))
INDVAL_Origin_GC=multipatt(INDVAL_OTUs_species_GC, INDVAL_Groups_Origin_GC, func="IndVal.g", duleg=FALSE, control=how(nperm=10000))
summary(INDVAL_Origin_GC, indvalcomp=TRUE)
load(file="PHYLOSEQ_TABLE.RData")
library(phyloseq)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
library(microbiome)
PHYLOSEQ_TABLE=subset_samples(PHYLOSEQ_TABLE, Treatment!="field_control")
PHYLOSEQ_TABLE
Other_PHY<-subset_samples(PHYLOSEQ_TABLE, SamplingTimepoint!="t1")
Other_PHY_rel = transform_sample_counts(Other_PHY, function(x)100*x/sum(x))
METADATA<-as(sample_data(Other_PHY_rel), "data.frame")
METADATA<-rownames_to_column(METADATA, var="Sample_ID")
OTU_table<-as(otu_table(Other_PHY_rel), "matrix")
if(taxa_are_rows(Other_PHY_rel)){OTU_table <- t(OTU_table)}
OTU_table_df = as.data.frame(OTU_table)
OTU_table_df<-rownames_to_column(OTU_table_df, var="Sample_ID")
# join datasets
library(dplyr)
library(tidyr)
OTU_table_IndVal<-right_join(METADATA, OTU_table_df, by="Sample_ID")
#indval
library(labdsv)
library(MASS)
library(vegan)
library(cluster)
library(indicspecies)
library(permute)
(INDVAL_OTUs_species_GC=(as.data.frame(OTU_table_IndVal[,14:4637])))
#Cluster
(INDVAL_Groups_Origin_GC=(as.character(OTU_table_IndVal$Treatment)))
INDVAL_Origin_GC=multipatt(INDVAL_OTUs_species_GC, INDVAL_Groups_Origin_GC, func="IndVal.g", duleg=FALSE, control=how(nperm=10000))
head(summary.multipatt(INDVAL_Origin_GC, alpha = 0.05, indvalcomp=TRUE))
IndValdf<-data.frame(INDVAL_Origin_GC$sign)
IndValdf<-rownames_to_column(IndValdf, var="ASV_ID")
IndValdf<-IndValdf %>% filter(p.value<=0.05) %>% dplyr:: rename(control=s.control) %>%
dplyr:: rename(`cumulative stress`=s.stress_2100)%>%
dplyr:: rename(`acute stress`=s.stress_ambient)
IndValdf<-IndValdf%>% dplyr::select(-index,-p.value,-stat)
library(reshape)
IndVallong<-melt(IndValdf)
indicatorNUMBER<-IndVallong %>% group_by(variable,value) %>% summarise(numberofOTUs=n())
# Component ‘A’ is the probability that the surveyed
# site belongs to the target site group given the fact that the species has been found.
# This conditional probability is called the specificity or positive predictive value of the species as indicator of the site group.
# Component ‘B’ is the probability of finding the species in sites belonging to the site group.
# This second conditional probability is called the fidelity or sensitivity of the species as indicator of the target site group
capture.output(summary.multipatt(INDVAL_Origin_GC, alpha = 0.05,indvalcomp=TRUE),file="IndVal_Treatment.csv")
## prep Graphs ####
# Define the taxa you want like this:
goodTaxa = (IndValdf$ASV_ID)
goodTaxa
allTaxa = taxa_names(Other_PHY_rel)
allTaxa <- allTaxa[(allTaxa %in% goodTaxa)]
ex1 = prune_taxa(allTaxa, Other_PHY_rel)
# new phyloseq object with just the taxa you kept.
ex1 #12 taxa
OTUTABLE<-as(otu_table(ex1), "matrix")
OTUTABLE<-as.data.frame(OTUTABLE)
OTUTABLE<-rownames_to_column(OTUTABLE, var="ASV_ID")
test<-inner_join(IndVallong,OTUTABLE, by=c("ASV_ID"))
test1<-test%>%gather("Sample_ID","Abundance",4:74)
# graph ####
TAXA<-as(tax_table(ex1),"matrix")
TAXA<-data.frame(TAXA)
TAXA<-rownames_to_column(TAXA, var="ASV_ID")
all1<-test1 %>%filter(value==1) %>% inner_join(TAXA,test1, by=c("ASV_ID")) %>% inner_join(METADATA, test1, by=c("Sample_ID"))
all3<-all1 %>% group_by(variable,ASV_ID) %>% summarise(MEAN=mean(Abundance))
all3
all4<-inner_join(TAXA,all3, by=c("ASV_ID"))
all4
all4$variable<-factor(all4$variable, levels=c("control", "acute stress", "cumulative stress"))
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_grid(~variable)+
scale_color_brewer(palette = "Spectral")+
theme_bw(base_size = 16, base_family = "Helvetica")+
coord_flip()+
ylab("mean rel.abundance [%]")
p
View(all4)
p<-ggplot(all4, aes(x=Family, y=(MEAN), color=Genus)) + geom_point(size=6) +
facet_grid(~variable)+
theme_bw(base_size = 16, base_family = "Helvetica")+
coord_flip()+
ylab("mean rel.abundance [%]")
p
View(all4)
pdf('IndVal_Treatment_TAXONOMY.pdf', width=10, height=8)
print(p)
graphics.off()
postscript(file = "IndVal_Treatment_TAXONOMY.eps", width =12, height = 6)
print(p)
dev.off()
View(all4)
##### Piechart Figure_3 ####
# Piechart
load(file="PHYLOSEQ_TABLE.RData")
library(phyloseq)
PHYLOSEQ_TABLE_control=subset_samples(PHYLOSEQ_TABLE, Treatment!="field_control")
PHYLOSEQ_TABLE_control
# db_RDA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CAP",formula = ~Genotype+Treatment+ Zoox.y+Protein.y+Chla.y+PSYield.y)
ORDCCA # explains 30.101 % of observed variation
library(vegan)
ANOVA<-anova.cca(ORDCCA, by="term", permutations = 10000) #
ANOVA #sig
ANOVA<-anova.cca(ORDCCA, by="term", permutations = 1000) #
ANOVA #sig
# CCA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CCA",formula = ~Genotype+Treatment+ Zoox.y+Protein.y+Chla.y+PSYield.y)
load(file="PHYLOSEQ_TABLE.RData")
library(phyloseq)
PHYLOSEQ_TABLE_control=subset_samples(PHYLOSEQ_TABLE, Treatment!="field_control")
PHYLOSEQ_TABLE_control
# CCA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CCA",formula = ~Genotype+Treatment+ Zoox+Protein+Chla+PSYield)
ORDCCA # explains 12.46 % of observed variation
library(vegan)
ANOVA<-anova.cca(ORDCCA, by="term", permutations = 1000) #
ANOVA #sig
capture.output(ANOVA,file="ANOVA_CCA_GenotypeHostHealth.doc")
p0 = plot_ordination(PHYLOSEQ_TABLE_control, ORDCCA, color="Genotype")+
scale_color_brewer(palette = "Paired")+
theme_classic(base_size = 16, base_family = "Helvetica")+
geom_hline(yintercept=c(0,0), linetype="dotted")+
geom_vline(xintercept=c(0,0), linetype="dotted")+
geom_point(size=3)
p0 = plot_ordination(PHYLOSEQ_TABLE_control, ORDCCA, color="Genotype")+
scale_color_brewer(palette = "Paired")+
theme_classic(base_size = 16, base_family = "Helvetica")+
geom_hline(yintercept=c(0,0), linetype="dotted")+
geom_vline(xintercept=c(0,0), linetype="dotted")+
geom_point(size=3)
p0
# CCA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CAP",formula = ~Genotype+Treatment+ Zoox+Protein+Chla+PSYield)
ORDCCA # explains 18.67 % of observed variation
library(vegan)
ANOVA<-anova.cca(ORDCCA, by="term", permutations = 1000) #
ANOVA #sig
# CCA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CAP",formula = ~Genotype) #+Treatment+ Zoox+Protein+Chla+PSYield)
ORDCCA # explains 32 % of observed variation
# CCA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CAP",formula = ~Genotype) +Treatment+ Zoox+Protein+Chla+PSYield)
# CCA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CAP",formula = ~Genotype) #+Treatment+ Zoox+Protein+Chla+PSYield)
ORDCCA # explains 32 % of observed variation
ANOVA<-anova.cca(ORDCCA, by="term", permutations = 1000) #
ANOVA #sig
# CCA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CAP",formula = ~Genotype+Treatment+ Zoox+Protein+Chla+PSYield)
# CCA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CAP",formula = ~Genotype+Treatment+ Zoox+Protein+Chla+PSYield)
# CCA
ORDCCA<-ordinate(PHYLOSEQ_TABLE_control,"CAP",formula = ~Genotype+Treatment+ Zoox+Protein+Chla+PSYield)
ORDCCA # explains 32 % of observed variation
library(vegan)
ANOVA<-anova.cca(ORDCCA, by="term", permutations = 1000) #
ANOVA #sig
capture.output(ANOVA,file="ANOVA_CCA_GenotypeHostHealth.doc")
#######################
#### Endozoicomonas ####
library(ggplot2)
library(phyloseq)
#load data
load(file="PHYLOSEQ_TABLE.RData")
load(file="PHYLOSEQ_TABLE_Count.RData")
#remove field_control samples
PHYLOSEQ_TABLE_control=subset_samples(PHYLOSEQ_TABLE, Treatment!="field_control")
PHYLOSEQ_TABLE_control
PHYLOSEQ_TABLE_control_count=subset_samples(PHYLOSEQ_TABLE_count, Treatment!="field_control")
PHYLOSEQ_TABLE_control_count
#only keep Endozoicmonas
Endo_Control_PHY_rel<-subset_taxa(PHYLOSEQ_TABLE_control, Genus=="D_5__Endozoicomonas")
Endo_Control_PHY_rel
Endo_Control_PHY_count<-subset_taxa(PHYLOSEQ_TABLE_control_count, Genus=="D_5__Endozoicomonas")
Endo_Control_PHY_count
#### Endo Tree ####
Endo_Control_PHY_rel = transform_sample_counts(PHYLOSEQ_TABLE_control_count, function(x)100*x/sum(x))
head(sample_data(Endo_Control_PHY_rel))
Endo_Control_PHY_rel<-subset_taxa(PHYLOSEQ_TABLE_control, Genus=="D_5__Endozoicomonas")
test<-prune_taxa(names(sort(taxa_sums(Endo_Control_PHY_rel), TRUE))[1:12], Endo_Control_PHY_rel)
tax_table(test)
stressASV<-subset_taxa(test, Feature_ID=="ffd7161776070abe4c1c2add0317f58d")
stressASV<-subset_taxa(Endo_Control_PHY_rel, Feature_ID=="ffd7161776070abe4c1c2add0317f58d")
Endo_Control_PHY_rel<-subset_taxa(PHYLOSEQ_TABLE_control, Genus=="D_5__Endozoicomonas")
test<-prune_taxa(names(sort(taxa_sums(Endo_Control_PHY_rel), TRUE))[1:12], Endo_Control_PHY_rel)
tax_table(test)
test<-subset_taxa(test, Feature_ID!="52236970d9a33a65914b7ee46274639d")
stressASV<-subset_taxa(Endo_Control_PHY_rel, Feature_ID=="ffd7161776070abe4c1c2add0317f58d")
newtree<-merge_phyloseq(test, stressASV)
newtree
test = transform_sample_counts(test, function(x)100*x/sum(x))
variable1 = as.character(get_variable(test, "Treatment"))
variable2 = as.character(get_variable(test, "Genotype"))
sample_data(test)$Tre_Gen <- mapply(paste0, variable1, variable2,
collapse = "_")
mergedGP = merge_samples(test, "Genotype")
print(mergedGP)
sample_data(mergedGP)$Genotype <- factor(sample_names(mergedGP))
sample_data(mergedGP)$Genotype <- as.character(sample_data(mergedGP)$Genotype)
sample_data(mergedGP)$Treatment <- as.character(sample_data(mergedGP)$Treatment)
str(sample_data(mergedGP))
mergedGP = transform_sample_counts(mergedGP, function(x)100*x/sum(x))
library(ggtree)
tree<-plot_tree(mergedGP, ladderize = "left", label.tips="taxa_names", color = "Genotype", size="abundance",  nodelabf = nodeplotblank,
base.spacing = 0.04)+
scale_color_brewer(palette = "Paired")+
theme_tree2()+
theme(legend.position = "right")+
scale_size_area(max_size = 8)
tree
tree<-plot_tree(mergedGP, ladderize = "right", color = "Genotype", size="abundance",  nodelabf = nodeplotblank,
base.spacing = 0.05)+
scale_color_brewer(palette = "Paired")+
theme_tree2()+
theme(legend.position = "right")+
scale_size_area(max_size = 6)
tree
library(ggtree)
install.packages("ggtree")
library(ggtree)
library(ggtree)
install.packages("ggtree")
install.packages("ggtree")
tree<-plot_tree(mergedGP, ladderize = "left", label.tips="taxa_names", color = "Genotype", size="abundance",  nodelabf = nodeplotblank,
base.spacing = 0.04)+
scale_color_brewer(palette = "Paired")+
theme_tree2()+
theme(legend.position = "right")+
scale_size_area(max_size = 8)
tree
tree<-plot_tree(mergedGP, ladderize = "left", label.tips="taxa_names", color = "Genotype", size="abundance",  nodelabf = nodeplotblank,
base.spacing = 0.04)+
scale_color_brewer(palette = "Paired")
tree
#### Endo Tree ####
Endo_Control_PHY_rel = transform_sample_counts(PHYLOSEQ_TABLE_control_count, function(x)100*x/sum(x))
head(sample_data(Endo_Control_PHY_rel))
Endo_Control_PHY_rel<-subset_taxa(PHYLOSEQ_TABLE_control, Genus=="D_5__Endozoicomonas")
test<-prune_taxa(names(sort(taxa_sums(Endo_Control_PHY_rel), TRUE))[1:12], Endo_Control_PHY_rel)
tax_table(test)
newtree<-merge_phyloseq(test, stressASV)
newtree
test = transform_sample_counts(newtree, function(x)100*x/sum(x))
variable1 = as.character(get_variable(test, "Treatment"))
variable2 = as.character(get_variable(test, "Genotype"))
sample_data(test)$Tre_Gen <- mapply(paste0, variable1, variable2,
collapse = "_")
mergedGP = merge_samples(test, "Genotype")
print(mergedGP)
sample_data(mergedGP)$Genotype <- factor(sample_names(mergedGP))
sample_data(mergedGP)$Genotype <- as.character(sample_data(mergedGP)$Genotype)
sample_data(mergedGP)$Treatment <- as.character(sample_data(mergedGP)$Treatment)
str(sample_data(mergedGP))
mergedGP = transform_sample_counts(mergedGP, function(x)100*x/sum(x))
library(ggtree)
tree<-plot_tree(mergedGP, ladderize = "left", label.tips="taxa_names", color = "Genotype", size="abundance",  nodelabf = nodeplotblank,
base.spacing = 0.04)+
scale_color_brewer(palette = "Paired")
tree
tree<-plot_tree(mergedGP, ladderize = "right", color = "Genotype", size="abundance",  nodelabf = nodeplotblank,
base.spacing = 0.05)+
scale_color_brewer(palette = "Paired")+
theme_tree2()+
theme(legend.position = "right")+
scale_size_area(max_size = 6)
tree
stressASV<-subset_taxa(Endo_Control_PHY_rel, Feature_ID=="ffd7161776070abe4c1c2add0317f58d")
stressASV<-subset_taxa(Endo_Control_PHY_rel, Feature_ID=="ffd7161776070abe4c1c2add0317f58d")
stressASV
newtree<-merge_phyloseq(test, stressASV)
newtree
test = transform_sample_counts(newtree, function(x)100*x/sum(x))
test
variable1 = as.character(get_variable(test, "Treatment"))
variable2 = as.character(get_variable(test, "Genotype"))
sample_data(test)$Tre_Gen <- mapply(paste0, variable1, variable2,
collapse = "_")
mergedGP = merge_samples(test, "Genotype")
print(mergedGP)
sample_data(mergedGP)$Genotype <- factor(sample_names(mergedGP))
sample_data(mergedGP)$Genotype <- as.character(sample_data(mergedGP)$Genotype)
sample_data(mergedGP)$Treatment <- as.character(sample_data(mergedGP)$Treatment)
str(sample_data(mergedGP))
mergedGP = transform_sample_counts(mergedGP, function(x)100*x/sum(x))
library(ggtree)
tree<-plot_tree(mergedGP, ladderize = "left", label.tips="taxa_names", color = "Genotype", size="abundance",  nodelabf = nodeplotblank,
base.spacing = 0.04)+
scale_color_brewer(palette = "Paired")
tree
#### Endo Tree ####
Endo_Control_PHY_rel = transform_sample_counts(PHYLOSEQ_TABLE_control_count, function(x)100*x/sum(x))
head(sample_data(Endo_Control_PHY_rel))
Endo_Control_PHY_rel<-subset_taxa(PHYLOSEQ_TABLE_control, Genus=="D_5__Endozoicomonas")
test<-prune_taxa(names(sort(taxa_sums(Endo_Control_PHY_rel), TRUE))[1:11], Endo_Control_PHY_rel)
tax_table(test)
stressASV<-subset_taxa(Endo_Control_PHY_rel, Feature_ID=="ffd7161776070abe4c1c2add0317f58d")
stressASV
newtree<-merge_phyloseq(test, stressASV)
newtree
test<-prune_taxa(names(sort(taxa_sums(Endo_Control_PHY_rel), TRUE))[1:12], Endo_Control_PHY_rel)
tax_table(test)
stressASV<-subset_taxa(Endo_Control_PHY_rel, Feature_ID=="ffd7161776070abe4c1c2add0317f58d"|
Feature_ID=="7644ba5e228f6c7e4cab13c973eebd3c"|
Feature_ID=="e09c9c87223e713ca3e185b78a49e825"|
Feature_ID=="1ca72d4dd6b29e683338f1ba895b5bc1"|
Feature_ID=="3964b537a5b584afc40192b91d5283b3"|
Feature_ID=="61a0606c0017caac996f520569863b69"|
Feature_ID=="b772fe52a7ceca98c424d9c16da7c826"|
Feature_ID=="fd123868368f46e30f2b2f7a2fa45861"|
Feature_ID=="52236970d9a33a65914b7ee46274639d"|
Feature_ID=="c0e6c66cfd0673747e59936d6c050407"|
Feature_ID=="8024ea926f3fdd804332b645f98fc7f4"|
Feature_ID=="5fb983e92b5f365c10ce1f7d494eb7e1"|
Feature_ID=="561f809577daa2932b264f72e2ed49fe")
stressASV
test = transform_sample_counts(stressASV, function(x)100*x/sum(x))
test
variable1 = as.character(get_variable(test, "Treatment"))
variable2 = as.character(get_variable(test, "Genotype"))
sample_data(test)$Tre_Gen <- mapply(paste0, variable1, variable2,
collapse = "_")
mergedGP = merge_samples(test, "Genotype")
print(mergedGP)
sample_data(mergedGP)$Genotype <- factor(sample_names(mergedGP))
sample_data(mergedGP)$Genotype <- as.character(sample_data(mergedGP)$Genotype)
sample_data(mergedGP)$Treatment <- as.character(sample_data(mergedGP)$Treatment)
str(sample_data(mergedGP))
mergedGP = transform_sample_counts(mergedGP, function(x)100*x/sum(x))
library(ggtree)
tree<-plot_tree(mergedGP, ladderize = "left", label.tips="taxa_names", color = "Genotype", size="abundance",  nodelabf = nodeplotblank,
base.spacing = 0.04)+
scale_color_brewer(palette = "Paired")
tree
tree<-plot_tree(mergedGP, ladderize = "right", color = "Genotype", size="abundance",  nodelabf = nodeplotblank,
base.spacing = 0.05)+
scale_color_brewer(palette = "Paired")+
theme_tree2()+
theme(legend.position = "right")+
scale_size_area(max_size = 6)
tree
